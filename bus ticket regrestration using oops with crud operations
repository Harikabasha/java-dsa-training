NAME:B.HARIKA
ROLLNO:22KB1A0513
BRANCH:CSE





🚌 Problem Statement: Bus Ticket Booking System

📌 Objective:
To develop a console-based Bus Ticket Booking System in Java that enables:

* Admins to add buses with route and pricing info.
* Passengers to search buses by route and book/cancel tickets.
* System to maintain seat availability, generate unique IDs, and display complete ticket and bus details with price and seat numbers.

🧙‍♂️ System Constraints:

| Constraint Type        | Description                                                                |
| ---------------------- | -------------------------------------------------------------------------- |
| ❌ Seat Limitation      | A bus cannot accept bookings once availableSeats == 0.                     |
| ✅ ID Uniqueness        | Passenger IDs and Ticket IDs are autogenerated and must remain unique.     |
| 🔍 Route-Based Booking | Passengers can only book buses matching source and destination.            |
| 💿 Bus ID Validation   | A bus can only be booked if the Bus ID entered is valid for that route.    |
| 🧑 One Ticket per ID   | Each passenger has a unique ticket; duplicate Passenger IDs aren't reused. |
| 💺 Fixed Seat Numbers  | Seat numbers increment sequentially and are not reused after cancellation. |
| 💸 Static Price Model  | Ticket price per bus is fixed and non-negotiable during booking.           |
| 🔀 Runtime Only Data   | Data is not persisted — booking info is reset on program restart.          |
| 📇 Duplicate Names OK  | Same passenger names are allowed (ID differentiates).                      |

🏩 Class and Object Design Overview

1. ✅ Person (Superclass)

* Role: Base class for people involved in the system.
* Attributes:

  * String name
  * int age
  * String gender
* Purpose: Shared attributes for future extensibility (e.g., staff).

2. 🧝 Passenger (extends Person)

* Attributes:

  * String passengerId – Auto-generated as "P1001", "P1002", etc.
* Methods:

  * displayPassengerDetails() – Print passenger info neatly.
* Special Feature: Passenger IDs are generated using a static counter to ensure uniqueness.

3. 🚌 Bus

* Attributes:

  * String busId, source, destination, departureTime
  * int totalSeats, availableSeats
  * double ticketPrice
  * List<Passenger> passengers
* Methods:

  * addPassenger(Passenger) – Adds a passenger if seats are available.
  * removePassengerById(String) – Cancels a passenger’s ticket.
  * displayDetails() – Bus info + passenger list.
* Key Constraint: No overbooking allowed.

4. 🎫 Ticket

* Attributes:

  * String ticketId – Unique ("T1001", "T1002", etc.)
  * String busId, passengerId, int seatNumber, double price
* Methods:

  * display(Passenger) – Ticket details, including price.
* Constraint: Ticket ID is tied directly to the seat number (not reused).

5. ⚙️ BookingOperations

* Attributes:

  * List<Bus> buses
  * Map\<String, Ticket> – Mapping from passengerId → ticket
  * int currentSeat – Used for sequential seat assignment
* Main Methods:

  * createBus() – Adds bus with admin-defined details.
  * bookTicket() – Filters buses by route → allows booking by Bus ID.
  * cancelTicket() – Removes passenger and frees up a seat.
  * viewBus() – Displays all buses and their passengers.
  * findBusById(String) – Finds bus for validation.

6. 🚦 Main

* Role: Entry point with a user-friendly menu loop.
* Menu Options:

  * Add Bus
  * Book Ticket
  * Cancel Ticket
  * View Bus Details
  * Exit
* Constraint: Input validation is handled for invalid choices and Bus IDs.

📝 Sample Console Output for Booking

Enter Source Location: Hyderabad
Enter Destination Location: Chennai

Available Buses for Route Hyderabad to Chennai:
Bus ID: B202 | Departure: 6:00 AM | Available Seats: 2 | Ticket Price: ₹600.0
Enter Bus ID to book ticket: B202
Enter Name: Ravi
Enter Age: 24
Enter Gender: Male

Booking Record:
Ticket ID     : T1001
Passenger     : Ravi
Bus ID        : B202
Seat No       : 1
Ticket Price  : ₹600.0
Available Seats: 1





================================================================================================================================================
SOURCE CODE:

Main.java:-

import java.util.*;

public class Main {

    static class Person {
        protected String name;
        protected String gender;
        protected int age;

        public Person(String name, int age, String gender) {
            this.name = name;
            this.age = age;
            this.gender = gender;
        }

        public String getName() { return name; }
        public String getGender() { return gender; }
        public int getAge() { return age; }
    }

    static class Passenger extends Person {
        private static int idCounter = 1;
        private final String passengerId;

        public Passenger(String name, int age, String gender) {
            super(name, age, gender);
            this.passengerId = "P" + (1000 + idCounter++);
        }

        public String getPassengerId() { return passengerId; }

        public void displayPassengerDetails() {
            System.out.println("Passenger ID: " + passengerId);
            System.out.println("Name       : " + getName());
            System.out.println("Age        : " + getAge());
            System.out.println("Gender     : " + getGender());
        }
    }

    static class Bus {
        private final String busId;
        public final String source, destination;
        public final String departureTime;
        private final int totalSeats;
        private int availableSeats;
        private final List<Passenger> passengers;
        private final double ticketPrice;

        public Bus(String busId, String source, String destination, String time, int seats, double price) {
            this.busId = busId;
            this.source = source;
            this.destination = destination;
            this.departureTime = time;
            this.totalSeats = seats;
            this.availableSeats = seats;
            this.ticketPrice = price;
            this.passengers = new ArrayList<>();
        }

        public String getBusId() { return busId; }
        public int getAvailableSeats() { return availableSeats; }
        public int getPassengerCount() { return passengers.size(); }
        public double getTicketPrice() { return ticketPrice; }

        public boolean addPassenger(Passenger p) {
            if (availableSeats > 0) {
                passengers.add(p);
                availableSeats--;
                return true;
            }
            return false;
        }

        public boolean removePassengerById(String pid) {
            for (Passenger p : passengers) {
                if (p.getPassengerId().equals(pid)) {
                    passengers.remove(p);
                    availableSeats++;
                    return true;
                }
            }
            return false;
        }

        public void displayDetails() {
            System.out.println("\n======= Bus Details =======");
            System.out.println("Bus ID        : " + busId);
            System.out.println("Source        : " + source);
            System.out.println("Destination   : " + destination);
            System.out.println("Departure Time: " + departureTime);
            System.out.println("Total Seats   : " + totalSeats);
            System.out.println("Available     : " + availableSeats);
            System.out.printf("Ticket Price  : Rs. %.2f%n", ticketPrice);
            System.out.println("===========================");
            if (!passengers.isEmpty()) {
                System.out.println("\n--- Passenger List ---");
                for (Passenger p : passengers) {
                    p.displayPassengerDetails();
                    System.out.println();
                }
            } else {
                System.out.println("No passengers booked yet.");
            }
        }
    }

    static class Ticket {
        private final String ticketId, busId, passengerId;
        private final int seatNumber;
        private final double price;

        public Ticket(String ticketId, String busId, String passengerId, int seatNumber, double price) {
            this.ticketId = ticketId;
            this.busId = busId;
            this.passengerId = passengerId;
            this.seatNumber = seatNumber;
            this.price = price;
        }

        public String getTicketId() { return ticketId; }
        public String getPassengerId() { return passengerId; }
        public String getBusId() { return busId; }

        public void display(Passenger p) {
            System.out.println("\n======= Ticket Details =======");
            System.out.println("Ticket ID     : " + ticketId);
            System.out.println("Passenger     : " + p.getName());
            System.out.println("Bus ID        : " + busId);
            System.out.println("Seat No       : " + seatNumber);
            System.out.printf("Ticket Price  : Rs. %.2f%n", price);
            System.out.println("================================");
        }
    }

    static class BookingOperations {
        private final List<Bus> buses = new ArrayList<>();
        private final Map<String, Ticket> ticketMap = new HashMap<>();
        private final Map<String, Passenger> passengerMap = new HashMap<>();
        private final Scanner sc = new Scanner(System.in);
        private int currentSeat = 1;

        public void createBus() {
            System.out.print("Enter Bus ID: ");
            String busId = sc.nextLine().trim();

            for (Bus b : buses) {
                if (b.getBusId().equalsIgnoreCase(busId)) {
                    System.out.println("❌ Bus ID already exists. Please use a unique Bus ID.");
                    return;
                }
            }

            System.out.print("Enter Source: ");
            String source = sc.nextLine().trim();
            System.out.print("Enter Destination: ");
            String dest = sc.nextLine().trim();
            System.out.print("Enter Departure Time: ");
            String time = sc.nextLine().trim();
            System.out.print("Enter Total Seats: ");
            int seats = Integer.parseInt(sc.nextLine());
            System.out.print("Enter Ticket Price: ");
            double price = Double.parseDouble(sc.nextLine());

            buses.add(new Bus(busId, source, dest, time, seats, price));
            System.out.println("✅ Bus added successfully!");
        }

        public void bookTicket() {
            if (buses.isEmpty()) {
                System.out.println("No buses available. Please add a bus first.");
                return;
            }

            System.out.print("Enter Source Location: ");
            String source = sc.nextLine().trim();
            System.out.print("Enter Destination Location: ");
            String destination = sc.nextLine().trim();

            List<Bus> matchingBuses = new ArrayList<>();
            for (Bus b : buses) {
                if (b.source.equalsIgnoreCase(source) && b.destination.equalsIgnoreCase(destination)) {
                    matchingBuses.add(b);
                }
            }

            if (matchingBuses.isEmpty()) {
                System.out.println("No buses found for the given route.");
                return;
            }

            System.out.println("\nAvailable Buses for Route " + source + " to " + destination + ":");
            for (Bus b : matchingBuses) {
                System.out.printf("Bus ID: %s | Departure: %s | Available Seats: %d | Ticket Price: Rs. %.2f%n",
                        b.getBusId(), b.departureTime, b.getAvailableSeats(), b.getTicketPrice());
            }

            System.out.print("Enter Bus ID to book ticket: ");
            String bid = sc.nextLine().trim();
            Bus selectedBus = findBusById(bid);

            if (selectedBus == null || !matchingBuses.contains(selectedBus)) {
                System.out.println("Invalid Bus ID for this route.");
                return;
            }

            if (selectedBus.getAvailableSeats() <= 0) {
                System.out.println("No available seats on this bus.");
                return;
            }

            System.out.print("Enter Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Age: ");
            int age = Integer.parseInt(sc.nextLine());
            System.out.print("Enter Gender: ");
            String gender = sc.nextLine();

            double price = selectedBus.getTicketPrice();
            System.out.printf("Ticket Price: Rs. %.2f%n", price);

            System.out.println("Select Payment Method:");
            System.out.println("1. UPI");
            System.out.println("2. Credit Card");
            System.out.println("3. Debit Card");
            System.out.println("4. Net Banking");
            System.out.print("Enter choice (1-4): ");
            int paymentMethod = Integer.parseInt(sc.nextLine());

            if (paymentMethod < 1 || paymentMethod > 4) {
                System.out.println("❌ Invalid payment method.");
                return;
            }

            System.out.print("Enter Payment Amount (Rs.): ");
            double amount = Double.parseDouble(sc.nextLine());

            if (amount != price) {
                System.out.println("❌ Payment failed! Amount doesn't match ticket price.");
                return;
            }

            Passenger passenger = new Passenger(name, age, gender);
            String tid = "T" + (1000 + currentSeat);
            Ticket ticket = new Ticket(tid, selectedBus.getBusId(), passenger.getPassengerId(), currentSeat, price);

            if (selectedBus.addPassenger(passenger)) {
                ticketMap.put(tid, ticket);
                passengerMap.put(passenger.getPassengerId(), passenger);
                ticket.display(passenger);
                System.out.println("✅ Booking Successful. Available Seats Left: " + selectedBus.getAvailableSeats());
                currentSeat++;
            } else {
                System.out.println("❌ Failed to book ticket.");
            }
        }

        public void cancelTicket() {
            System.out.print("Enter Ticket ID to cancel: ");
            String tid = sc.nextLine().trim();

            Ticket ticket = ticketMap.get(tid);
            if (ticket == null) {
                System.out.println("❌ No ticket found with ID: " + tid);
                return;
            }

            Bus bus = findBusById(ticket.getBusId());
            if (bus != null && bus.removePassengerById(ticket.getPassengerId())) {
                ticketMap.remove(tid);
                passengerMap.remove(ticket.getPassengerId());
                System.out.println("✅ Ticket cancelled successfully.");
            } else {
                System.out.println("❌ Error cancelling ticket.");
            }
        }

        public void viewBus() {
            if (buses.isEmpty()) {
                System.out.println("No bus details available.");
                return;
            }
            for (Bus b : buses) {
                b.displayDetails();
            }
        }

        private Bus findBusById(String bid) {
            for (Bus b : buses) {
                if (b.getBusId().equalsIgnoreCase(bid)) return b;
            }
            return null;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BookingOperations ops = new BookingOperations();

        while (true) {
            System.out.println("\n===== Bus Ticket Booking System =====");
            System.out.println("1. Add Bus");
            System.out.println("2. Book Ticket");
            System.out.println("3. Cancel Ticket (by Ticket ID)");
            System.out.println("4. View Bus Details");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");

            int choice;
            try {
                choice = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
                continue;
            }

            switch (choice) {
                case 1: ops.createBus(); break;
                case 2: ops.bookTicket(); break;
                case 3: ops.cancelTicket(); break;
                case 4: ops.viewBus(); break;
                case 5:
                    System.out.println("Thank you for using the system!");
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
}
